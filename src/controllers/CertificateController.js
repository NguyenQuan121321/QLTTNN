// (M·ªöI) G·ªçi Model
const certificateModel = require('../models/certificateModel');
// (M·ªöI) G·ªçi studentModel ƒë·ªÉ ki·ªÉm tra h·ªçc vi√™n t·ªìn t·∫°i
const studentModel = require('../models/studentModel');

/**
 * üìú L·∫•y danh s√°ch t·∫•t c·∫£ ch·ª©ng ch·ªâ
 */
exports.getAllCertificates = async (req, res) => {
  try {
    const certificates = await certificateModel.findAll();
    res.json({ success: true, data: certificates });
  } catch (err) {
    console.error('‚ùå L·ªói getAllCertificates:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y danh s√°ch ch·ª©ng ch·ªâ' });
  }
};

/**
 * üîç L·∫•y chi ti·∫øt 1 ch·ª©ng ch·ªâ theo ID
 */
exports.getCertificateById = async (req, res) => {
  try {
    const { id } = req.params;
    const cert = await certificateModel.findById(id);

    if (!cert)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ' });

    res.json({ success: true, data: cert });
  } catch (err) {
    console.error('‚ùå L·ªói getCertificateById:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y th√¥ng tin ch·ª©ng ch·ªâ' });
  }
};

/**
 * ‚ûï T·∫°o m·ªõi ch·ª©ng ch·ªâ (Controller x·ª≠ l√Ω validation)
 */
exports.createCertificate = async (req, res) => {
  try {
    const certificateData = req.body;
    const { hocVienId, maChungChi, tenChungChi, examId } = certificateData;

    // 1. Validate d·ªØ li·ªáu ƒë·∫ßu v√†o c∆° b·∫£n
    if (!hocVienId || !tenChungChi)
      return res.status(400).json({ success: false, message: 'Thi·∫øu m√£ h·ªçc vi√™n ho·∫∑c t√™n ch·ª©ng ch·ªâ' });

    // 2. ‚úÖ Ki·ªÉm tra h·ªçc vi√™n t·ªìn t·∫°i (D√πng studentModel)
    const student = await studentModel.findById(hocVienId); // findById tr·∫£ v·ªÅ chi ti·∫øt ho·∫∑c null
    if (!student) {
      return res.status(400).json({
        success: false,
        message: `H·ªçc vi√™n v·ªõi ID ${hocVienId} kh√¥ng t·ªìn t·∫°i`
      });
    }

    // 3. ‚úÖ Ki·ªÉm tra ƒëi·ªÉm thi (D√πng certificateModel.findExamResult)
    if (examId) {
      const examResult = await certificateModel.findExamResult(hocVienId, examId);
      if (!examResult) {
         return res.status(400).json({
          success: false,
          message: `H·ªçc vi√™n (ID ${hocVienId}) ch∆∞a c√≥ ƒëi·ªÉm cho k·ª≥ thi (ID ${examId})`
        });
      }
      if (examResult.diem < 70) {
         return res.status(400).json({
          success: false,
          message: `H·ªçc vi√™n kh√¥ng ƒë·∫°t ƒëi·ªÉm thi (ƒêi·ªÉm: ${examResult.diem}/100, Y√™u c·∫ßu: 70/100)`
        });
      }
    } else {
       return res.status(400).json({
          success: false,
          message: `C·∫ßn cung c·∫•p 'examId' ƒë·ªÉ ki·ªÉm tra ƒëi·ªÅu ki·ªán c·∫•p ch·ª©ng ch·ªâ`
        });
    }

    // 4. ‚úÖ Ki·ªÉm tra tr√πng l·∫∑p ch·ª©ng ch·ªâ (D√πng certificateModel.findByStudentAndCode)
     if (maChungChi) { // Ch·ªâ ki·ªÉm tra n·∫øu c√≥ m√£ CC
        const existingCert = await certificateModel.findByStudentAndCode(hocVienId, maChungChi);
        if (existingCert) {
          return res.status(400).json({
            success: false,
            message: `H·ªçc vi√™n ID ${hocVienId} ƒë√£ c√≥ ch·ª©ng ch·ªâ m√£ ${maChungChi} r·ªìi`
          });
        }
     }


    // 5. ‚úÖ N·∫øu m·ªçi th·ª© h·ª£p l·ªá, g·ªçi Model ƒë·ªÉ t·∫°o
    const [newCertId] = await certificateModel.create(certificateData);

    res.status(201).json({
      success: true,
      message: 'Th√™m ch·ª©ng ch·ªâ th√†nh c√¥ng (ƒë√£ x√°c th·ª±c ƒëi·ªÉm thi)',
      id: newCertId
    });
  } catch (err) {
    console.error('‚ùå L·ªói createCertificate:', err);
     // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ n·∫øu Model n√©m ra (v√≠ d·ª•: l·ªói DB)
     if (err.code === 'ER_DUP_ENTRY' && err.sqlMessage.includes('maChungChi')) { // V√≠ d·ª• check l·ªói unique maChungChi
         return res.status(400).json({ success: false, message: `M√£ ch·ª©ng ch·ªâ '${req.body.maChungChi}' ƒë√£ t·ªìn t·∫°i.` });
     }
    res.status(500).json({ success: false, message: 'L·ªói server khi th√™m ch·ª©ng ch·ªâ' });
  }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t ch·ª©ng ch·ªâ
 */
exports.updateCertificate = async (req, res) => {
  try {
    const { id } = req.params;
    const updated = await certificateModel.update(id, req.body);

    if (!updated)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ ƒë·ªÉ c·∫≠p nh·∫≠t' });

    res.json({ success: true, message: 'C·∫≠p nh·∫≠t ch·ª©ng ch·ªâ th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói updateCertificate:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi c·∫≠p nh·∫≠t ch·ª©ng ch·ªâ' });
  }
};

/**
 * üóëÔ∏è V√¥ hi·ªáu h√≥a ch·ª©ng ch·ªâ
 */
exports.deleteCertificate = async (req, res) => {
  try {
    const { id } = req.params;
    // G·ªçi h√†m disable t·ª´ Model
    const disabled = await certificateModel.disable(id);

    if (!disabled)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ ƒë·ªÉ v√¥ hi·ªáu h√≥a' });

    res.json({ success: true, message: 'ƒê√£ v√¥ hi·ªáu h√≥a ch·ª©ng ch·ªâ th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói deleteCertificate:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi v√¥ hi·ªáu h√≥a ch·ª©ng ch·ªâ' });
  }
};