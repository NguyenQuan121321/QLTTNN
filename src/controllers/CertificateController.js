const db = require('../config/database');

/**
 * üìú L·∫•y danh s√°ch t·∫•t c·∫£ ch·ª©ng ch·ªâ
 */
exports.getAllCertificates = async (req, res) => {
  try {
    const certificates = await db('ChungChi')
      .select(
        'id',
        'hocVienId',
        'maChungChi',
        'tenChungChi',
        'ngayCap',
        'nguoiKy',
        'hieuLucDen',
        'filePDF',
        'qrCode',
        'trangThai'
      );

    res.json({ success: true, data: certificates });
  } catch (err) {
    console.error('‚ùå L·ªói getAllCertificates:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y danh s√°ch ch·ª©ng ch·ªâ' });
  }
};

/**
 * üîç L·∫•y chi ti·∫øt 1 ch·ª©ng ch·ªâ theo ID
 */
exports.getCertificateById = async (req, res) => {
  try {
    const { id } = req.params;
    const cert = await db('ChungChi').where({ id }).first();

    if (!cert)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ' });

    res.json({ success: true, data: cert });
  } catch (err) {
    console.error('‚ùå L·ªói getCertificateById:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y th√¥ng tin ch·ª©ng ch·ªâ' });
  }
};

/**
 * ‚ûï T·∫°o m·ªõi ch·ª©ng ch·ªâ
 */
exports.createCertificate = async (req, res) => {
  try {
    const {
      hocVienId,
      maChungChi,
      tenChungChi,
      ngayCap,
      nguoiKy,
      hieuLucDen,
      filePDF,
      qrCode,
      trangThai
    } = req.body;

    if (!hocVienId || !tenChungChi)
      return res.status(400).json({ success: false, message: 'Thi·∫øu m√£ h·ªçc vi√™n ho·∫∑c t√™n ch·ª©ng ch·ªâ' });

    // ‚úÖ Ki·ªÉm tra h·ªçc vi√™n t·ªìn t·∫°i
    const hv = await db('HocVien').where({ id: hocVienId }).first();
    if (!hv) {
      return res.status(400).json({
        success: false,
        message: `H·ªçc vi√™n v·ªõi ID ${hocVienId} kh√¥ng t·ªìn t·∫°i`
      });
    }

    // ‚úÖ Ki·ªÉm tra xem h·ªçc vi√™n n√†y ƒë√£ c√≥ ch·ª©ng ch·ªâ n√†y ch∆∞a
    const existingCert = await db('ChungChi')
      .where({ hocVienId, maChungChi })
      .first();

    if (existingCert) {
      return res.status(400).json({
        success: false,
        message: `H·ªçc vi√™n ID ${hocVienId} ƒë√£ c√≥ ch·ª©ng ch·ªâ m√£ ${maChungChi} r·ªìi`
      });
    }

    // ‚úÖ Th√™m ch·ª©ng ch·ªâ m·ªõi
    const [newCertId] = await db('ChungChi').insert({
      hocVienId,
      maChungChi,
      tenChungChi,
      ngayCap,
      nguoiKy,
      hieuLucDen,
      filePDF,
      qrCode,
      trangThai: trangThai || 'valid'
    });

    res.status(201).json({
      success: true,
      message: 'Th√™m ch·ª©ng ch·ªâ th√†nh c√¥ng',
      id: newCertId
    });
  } catch (err) {
    console.error('‚ùå L·ªói createCertificate:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi th√™m ch·ª©ng ch·ªâ' });
  }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t ch·ª©ng ch·ªâ
 */
exports.updateCertificate = async (req, res) => {
  try {
    const { id } = req.params;
    const {
      hocVienId,
      maChungChi,
      tenChungChi,
      ngayCap,
      nguoiKy,
      hieuLucDen,
      filePDF,
      qrCode,
      trangThai
    } = req.body;

    const updated = await db('ChungChi').where({ id }).update({
      hocVienId,
      maChungChi,
      tenChungChi,
      ngayCap,
      nguoiKy,
      hieuLucDen,
      filePDF,
      qrCode,
      trangThai
    });

    if (!updated)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ ƒë·ªÉ c·∫≠p nh·∫≠t' });

    res.json({ success: true, message: 'C·∫≠p nh·∫≠t ch·ª©ng ch·ªâ th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói updateCertificate:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi c·∫≠p nh·∫≠t ch·ª©ng ch·ªâ' });
  }
};

/**
 * üóëÔ∏è V√¥ hi·ªáu h√≥a (ho·∫∑c x√≥a) ch·ª©ng ch·ªâ
 */
exports.deleteCertificate = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await db('ChungChi').where({ id }).update({ trangThai: 'expired' });

    if (!deleted)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ ƒë·ªÉ v√¥ hi·ªáu h√≥a' });

    res.json({ success: true, message: 'ƒê√£ v√¥ hi·ªáu h√≥a ch·ª©ng ch·ªâ th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói deleteCertificate:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi x√≥a ch·ª©ng ch·ªâ' });
  }
};