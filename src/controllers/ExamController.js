// (M·ªöI) G·ªçi Model
const examModel = require('../models/examModel');
// (Optional) G·ªçi classModel n·∫øu c·∫ßn ki·ªÉm tra l·ªõp t·ªìn t·∫°i
// const classModel = require('../models/classModel');

/**
 * üìã L·∫•y danh s√°ch k·ª≥ thi (c√≥ th·ªÉ l·ªçc theo l·ªõp)
 */
exports.getAllExams = async (req, res) => {
  try {
    const exams = await examModel.findAll(req.query); // Truy·ªÅn query params ƒë·ªÉ l·ªçc
    res.json({ success: true, data: exams });
  } catch (err) {
    console.error('‚ùå L·ªói getAllExams:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y danh s√°ch k·ª≥ thi' });
  }
};

/**
 * üîç L·∫•y chi ti·∫øt k·ª≥ thi (k√®m k·∫øt qu·∫£)
 */
exports.getExamById = async (req, res) => {
  try {
    const { id } = req.params;
    const exam = await examModel.findById(id);

    if (!exam)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y k·ª≥ thi' });

    res.json({ success: true, data: exam });
  } catch (err) {
    console.error('‚ùå L·ªói getExamById:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y th√¥ng tin k·ª≥ thi' });
  }
};

/**
 * ‚ûï Th√™m m·ªõi k·ª≥ thi
 */
exports.createExam = async (req, res) => {
  try {
     // (Optional but good practice) Validate if lopHocId exists before calling model
     // const { lopHocId } = req.body;
     // if (lopHocId) {
     //    const lop = await classModel.findById(lopHocId); // Use findById from classModel
     //    if (!lop) {
     //       return res.status(400).json({ success: false, message: `L·ªõp h·ªçc v·ªõi ID ${lopHocId} kh√¥ng t·ªìn t·∫°i` });
     //    }
     // }

    const [newExamId] = await examModel.create(req.body);

    res.status(201).json({
      success: true,
      message: 'T·∫°o k·ª≥ thi th√†nh c√¥ng',
      id: newExamId
    });
  } catch (err) {
    console.error('‚ùå L·ªói createExam:', err);
     if (err.message.includes('Thi·∫øu t√™n k·ª≥ thi')) {
        return res.status(400).json({ success: false, message: err.message });
     }
    // Handle other specific errors from model if needed
    res.status(500).json({ success: false, message: 'L·ªói server khi t·∫°o k·ª≥ thi' });
  }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t k·ª≥ thi
 */
exports.updateExam = async (req, res) => {
  try {
    const { id } = req.params;
    const updated = await examModel.update(id, req.body);

    if (!updated)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y k·ª≥ thi ƒë·ªÉ c·∫≠p nh·∫≠t' });

    res.json({ success: true, message: 'C·∫≠p nh·∫≠t k·ª≥ thi th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói updateExam:', err);
    // Handle specific errors from model if needed
    res.status(500).json({ success: false, message: 'L·ªói server khi c·∫≠p nh·∫≠t k·ª≥ thi' });
  }
};

/**
 * üóëÔ∏è X√≥a k·ª≥ thi
 */
exports.deleteExam = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await examModel.remove(id);

    if (!deleted)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y k·ª≥ thi ƒë·ªÉ x√≥a' });

    res.json({ success: true, message: 'X√≥a k·ª≥ thi th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói deleteExam:', err);
     // Handle potential foreign key constraint errors if ON DELETE RESTRICT is used
     if (err.code && err.code.includes('ER_ROW_IS_REFERENCED')) { // Example error code
        return res.status(400).json({ success: false, message: 'Kh√¥ng th·ªÉ x√≥a k·ª≥ thi v√¨ ƒë√£ c√≥ k·∫øt qu·∫£ thi li√™n quan.' });
     }
    res.status(500).json({ success: false, message: 'L·ªói server khi x√≥a k·ª≥ thi' });
  }
};