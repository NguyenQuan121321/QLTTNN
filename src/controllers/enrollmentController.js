// (M·ªöI) G·ªçi c√°c Model li√™n quan
const enrollmentModel = require('../models/enrollmentModel');
const studentModel = require('../models/studentModel');
const classModel = require('../models/classModel');
const feeModel = require('../models/feeModel'); // ƒê·ªÉ t·ª± ƒë·ªông t·∫°o h·ªçc ph√≠

/**
 * ‚ûï Ghi danh h·ªçc vi√™n v√†o l·ªõp
 */
exports.enrollStudent = async (req, res) => {
  try {
    const { hocVienId, lopHocId } = req.body;

    // 1. Validate ƒë·∫ßu v√†o c∆° b·∫£n
    if (!hocVienId || !lopHocId) {
      return res.status(400).json({ success: false, message: 'Thi·∫øu ID h·ªçc vi√™n ho·∫∑c ID l·ªõp h·ªçc.' });
    }

    // 2. Ki·ªÉm tra h·ªçc vi√™n v√† l·ªõp h·ªçc t·ªìn t·∫°i
    const studentPromise = studentModel.findById(hocVienId);
    const classPromise = classModel.findById(lopHocId);
    const [student, lopHoc] = await Promise.all([studentPromise, classPromise]);

    if (!student) {
      return res.status(404).json({ success: false, message: `H·ªçc vi√™n ID ${hocVienId} kh√¥ng t·ªìn t·∫°i.` });
    }
    if (!lopHoc) {
      return res.status(404).json({ success: false, message: `L·ªõp h·ªçc ID ${lopHocId} kh√¥ng t·ªìn t·∫°i.` });
    }
    // (Optional) Ki·ªÉm tra tr·∫°ng th√°i l·ªõp (vd: ch·ªâ ghi danh v√†o l·ªõp 'OPEN'/'Mo')
    if (lopHoc.trangThai !== 'Mo' && lopHoc.trangThai !== 'OPEN') { // Check c·∫£ 2 ki·ªÉu enum
         return res.status(400).json({ success: false, message: `Kh√¥ng th·ªÉ ghi danh v√†o l·ªõp ƒë√£ ${lopHoc.trangThai}.` });
    }
    // (Optional) Ki·ªÉm tra sƒ© s·ªë l·ªõp
    // C·∫ßn query count s·ªë enrollment 'active' cho l·ªõp n√†y
    // const currentEnrollments = await db('Enrollment').where({lopHocId, status: 'active'}).count('id as count').first();
    // if (currentEnrollments.count >= lopHoc.siSoToiDa) { ... }


    // 3. Ki·ªÉm tra xem ƒë√£ ghi danh ch∆∞a (D√πng Model)
    const existing = await enrollmentModel.findExisting(hocVienId, lopHocId);
    if (existing) {
      return res.status(400).json({ success: false, message: `H·ªçc vi√™n '${student.fullName}' ƒë√£ ghi danh v√†o l·ªõp '${lopHoc.tenLop}' r·ªìi.` });
    }

    // 4. Th·ª±c hi·ªán ghi danh (D√πng Model)
    const [newEnrollmentId] = await enrollmentModel.create({ hocVienId, lopHocId });

    // 5. (QUAN TR·ªåNG) T·ª± ƒë·ªông t·∫°o h·ªçc ph√≠ cho l·∫ßn ghi danh n√†y
    // C·∫ßn l·∫•y th√¥ng tin h·ªçc ph√≠ t·ª´ M√¥n h·ªçc ho·∫∑c L·ªõp h·ªçc (database hi·ªán ch∆∞a c√≥ c·ªôt h·ªçc ph√≠ chu·∫©n)
    // Gi·∫£ s·ª≠ l·∫•y h·ªçc ph√≠ t·ª´ M√¥n h·ªçc (c·∫ßn th√™m c·ªôt 'hocPhi' v√†o b·∫£ng MonHoc)
    // Ho·∫∑c l·∫•y 1 gi√° tr·ªã c·ªë ƒë·ªãnh, ho·∫∑c truy·ªÅn `soTien` v√†o req.body khi ghi danh
    const feeAmount = lopHoc.hocPhi // Gi·∫£ s·ª≠ b·∫£ng LopHoc c√≥ c·ªôt hocPhi
                      || 2000000; // Ho·∫∑c m·ªôt gi√° tr·ªã m·∫∑c ƒë·ªãnh
    const dueDate = new Date(); // L·∫•y h·∫°n ƒë√≥ng m·∫∑c ƒë·ªãnh (vd: 7 ng√†y sau)
    dueDate.setDate(dueDate.getDate() + 7);

    await feeModel.create({
        hocVienId,
        lopHocId,
        soTien: feeAmount,
        hanDong: dueDate.toISOString().split('T')[0], // Format YYYY-MM-DD
        // description: `H·ªçc ph√≠ l·ªõp ${lopHoc.tenLop}` // N·∫øu DB m·ªõi c√≥ description
    });


    res.status(201).json({
      success: true,
      message: `Ghi danh h·ªçc vi√™n '${student.fullName}' v√†o l·ªõp '${lopHoc.tenLop}' th√†nh c√¥ng. ƒê√£ t·∫°o phi·∫øu thu h·ªçc ph√≠.`,
      enrollmentId: newEnrollmentId
    });

  } catch (err) {
    console.error('‚ùå L·ªói enrollStudent:', err);
    if (err.message.includes('Thi·∫øu ID')) {
        return res.status(400).json({ success: false, message: err.message });
    }
    res.status(500).json({ success: false, message: 'L·ªói server khi ghi danh h·ªçc vi√™n.' });
  }
};

/**
 * üìã L·∫•y danh s√°ch ghi danh (l·ªçc theo studentId ho·∫∑c classId)
 */
exports.getAllEnrollments = async (req, res) => {
  try {
    const enrollments = await enrollmentModel.findAll(req.query); // Truy·ªÅn query params ƒë·ªÉ l·ªçc
    res.json({ success: true, data: enrollments });
  } catch (err) {
    console.error('‚ùå L·ªói getAllEnrollments:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y danh s√°ch ghi danh.' });
  }
};

/**
 * üîç L·∫•y chi ti·∫øt m·ªôt l∆∞·ª£t ghi danh
 */
exports.getEnrollmentById = async (req, res) => {
  try {
    const { id } = req.params;
    const enrollment = await enrollmentModel.findById(id);
    if (!enrollment) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ghi danh.' });
    }
    res.json({ success: true, data: enrollment });
  } catch (err) {
    console.error('‚ùå L·ªói getEnrollmentById:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y chi ti·∫øt ghi danh.' });
  }
};

/**
 * üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i ghi danh
 */
exports.updateEnrollmentStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body; // Tr·∫°ng th√°i m·ªõi: 'active', 'withdrawn', 'completed'

    if (!status) {
         return res.status(400).json({ success: false, message: 'Thi·∫øu tr·∫°ng th√°i m·ªõi (status).' });
    }

    const updated = await enrollmentModel.updateStatus(id, status);
    if (!updated) {
       return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ghi danh ƒë·ªÉ c·∫≠p nh·∫≠t.' });
    }

    res.json({ success: true, message: `C·∫≠p nh·∫≠t tr·∫°ng th√°i ghi danh th√†nh '${status}' th√†nh c√¥ng.` });

  } catch (err) {
    console.error('‚ùå L·ªói updateEnrollmentStatus:', err);
     if (err.message.includes('Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá')) {
        return res.status(400).json({ success: false, message: err.message });
    }
    res.status(500).json({ success: false, message: 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ghi danh.' });
  }
};

/**
 * üóëÔ∏è X√≥a/H·ªßy ghi danh (N√™n d√πng update th√†nh 'withdrawn')
 */
exports.deleteEnrollment = async (req, res) => {
  try {
    const { id } = req.params;

     // Thay v√¨ x√≥a c·ª©ng, c·∫≠p nh·∫≠t status th√†nh 'withdrawn' s·∫Ω t·ªët h∆°n
     const updated = await enrollmentModel.updateStatus(id, 'withdrawn');
     if (!updated) {
        return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ghi danh ƒë·ªÉ h·ªßy.' });
     }
     res.json({ success: true, message: 'ƒê√£ h·ªßy ghi danh (c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh withdrawn).' });

    // N·∫øu v·∫´n mu·ªën x√≥a c·ª©ng:
    // const deleted = await enrollmentModel.remove(id);
    // if (!deleted) {
    //   return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ghi danh ƒë·ªÉ x√≥a.' });
    // }
    // res.json({ success: true, message: 'X√≥a l∆∞·ª£t ghi danh th√†nh c√¥ng.' });

  } catch (err) {
    console.error('‚ùå L·ªói deleteEnrollment:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi x√≥a/h·ªßy ghi danh.' });
  }
};