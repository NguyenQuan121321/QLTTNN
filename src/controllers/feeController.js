// (M·ªöI) G·ªçi Model
const feeModel = require('../models/feeModel');
// (Optional) G·ªçi studentModel, classModel n·∫øu c·∫ßn ki·ªÉm tra HV, L·ªõp t·ªìn t·∫°i
// const studentModel = require('../models/studentModel');
// const classModel = require('../models/classModel');

/**
 * üí∏ T·∫°o phi·∫øu thu h·ªçc ph√≠
 */
exports.createFee = async (req, res) => {
  try {
     // (Optional) Validate hocVienId, lopHocId exists?
     // const { hocVienId, lopHocId } = req.body;
     // const student = await studentModel.findById(hocVienId);
     // if (!student) { return res.status(400).json({ success: false, message: 'H·ªçc vi√™n kh√¥ng t·ªìn t·∫°i' }); }
     // if (lopHocId) { const lop = await classModel.findById(lopHocId); if(!lop) { return res.status(400).json({ success: false, message: 'L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i' }); } }

    await feeModel.create(req.body);
    res.status(201).json({ success: true, message: 'T·∫°o phi·∫øu thu h·ªçc ph√≠ th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói createFee:', err);
    if (err.message.includes('Thi·∫øu th√¥ng tin')) { // L·ªói validation t·ª´ Model
        return res.status(400).json({ success: false, message: err.message });
    }
    res.status(500).json({ success: false, message: 'L·ªói server khi t·∫°o phi·∫øu thu' });
  }
};

/**
 * üí∞ Ghi nh·∫≠n thanh to√°n
 */
exports.recordPayment = async (req, res) => {
  try {
    const { hocPhiId, soTienThanhToan, phuongThuc, ghiChu } = req.body;

    // 1. Ki·ªÉm tra phi·∫øu thu t·ªìn t·∫°i (D√πng Model)
    const hocPhi = await feeModel.findById(hocPhiId);
    if (!hocPhi) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu thu h·ªçc ph√≠' });
    }

    // 2. Th√™m thanh to√°n (D√πng Model)
    await feeModel.addPayment({ hocPhiId, soTienThanhToan, phuongThuc, ghiChu });

    // 3. T√≠nh l·∫°i t·ªïng ƒë√£ ƒë√≥ng (D√πng Model)
    const result = await feeModel.getTotalPaid(hocPhiId);
    const totalPaid = result.totalPaid || 0;

    // 4. X√°c ƒë·ªãnh tr·∫°ng th√°i m·ªõi
    let newStatus = 'partial';
    if (totalPaid >= hocPhi.soTien) {
      newStatus = 'paid';
    } else if (totalPaid <= 0 && hocPhi.trangThai !== 'overdue') { // Kh√¥ng chuy·ªÉn v·ªÅ unpaid n·∫øu ƒë√£ overdue
      newStatus = 'unpaid';
    } else if (hocPhi.trangThai === 'overdue' && totalPaid < hocPhi.soTien) {
      newStatus = 'overdue'; // V·∫´n gi·ªØ overdue n·∫øu ch∆∞a ƒë√≥ng ƒë·ªß
    }
    // Th√™m tr∆∞·ªùng h·ª£p n·∫øu ƒëang partial m√† ƒë√≥ng th√™m v·∫´n ch∆∞a ƒë·ªß th√¨ v·∫´n l√† partial
    else if (hocPhi.trangThai === 'partial' && totalPaid < hocPhi.soTien) {
        newStatus = 'partial';
    }


    // 5. C·∫≠p nh·∫≠t tr·∫°ng th√°i (D√πng Model) - Ch·ªâ update n·∫øu tr·∫°ng th√°i thay ƒë·ªïi
    if (newStatus !== hocPhi.trangThai) {
       await feeModel.updateStatus(hocPhiId, newStatus);
    }

    res.json({ success: true, message: `Thanh to√°n th√†nh c√¥ng. T·ªïng ƒë√£ ƒë√≥ng: ${totalPaid}`, currentStatus: newStatus });

  } catch (err) {
    console.error('‚ùå L·ªói recordPayment:', err);
     if (err.message.includes('Thi·∫øu ID phi·∫øu thu')) { // L·ªói validation t·ª´ Model
        return res.status(400).json({ success: false, message: err.message });
    }
    res.status(500).json({ success: false, message: 'L·ªói server khi ghi nh·∫≠n thanh to√°n' });
  }
};

/**
 * üîí Qu√©t v√† kh√≥a c√°c t√†i kho·∫£n qu√° h·∫°n
 */
exports.checkAndLockOverdueAccounts = async (req, res) => {
  try {
    // 1. ƒê√°nh d·∫•u c√°c phi·∫øu qu√° h·∫°n (D√πng Model)
    await feeModel.markOverdue();

    // 2. L·∫•y ID h·ªçc vi√™n qu√° h·∫°n (D√πng Model)
    const studentIdsToLock = await feeModel.findOverdueStudentIds();

    if (studentIdsToLock.length === 0) {
      return res.json({ success: true, message: 'Kh√¥ng c√≥ h·ªçc vi√™n n√†o qu√° h·∫°n' });
    }

    // 3. Kh√≥a t√†i kho·∫£n (D√πng Model)
    await feeModel.lockStudentAccounts(studentIdsToLock);

    res.json({
      success: true,
      message: `ƒê√£ kh√≥a ${studentIdsToLock.length} t√†i kho·∫£n h·ªçc vi√™n do qu√° h·∫°n h·ªçc ph√≠`,
      lockedAccountIds: studentIdsToLock
    });

  } catch (err) {
    console.error('‚ùå L·ªói checkAndLockOverdueAccounts:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi x·ª≠ l√Ω t√†i kho·∫£n qu√° h·∫°n' });
  }
};