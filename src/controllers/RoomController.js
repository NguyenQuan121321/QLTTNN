// (M·ªöI) G·ªçi Model
const roomModel = require('../models/roomModel');

/**
 * üìã L·∫•y t·∫•t c·∫£ ph√≤ng h·ªçc
 */
exports.getAllRooms = async (req, res) => {
  try {
    const rooms = await roomModel.findAll();
    res.json({ success: true, data: rooms });
  } catch (err) {
    console.error('‚ùå L·ªói getAllRooms:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y ph√≤ng h·ªçc' });
  }
};

/**
 * üîç L·∫•y ph√≤ng h·ªçc theo m√£ ph√≤ng
 */
exports.getRoomById = async (req, res) => {
  try {
    const { id } = req.params; // 'id' ·ªü ƒë√¢y th·ª±c ch·∫•t l√† 'maPhong' t·ª´ route
    const room = await roomModel.findById(id);

    if (!room) {
        return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ph√≤ng h·ªçc' });
    }
    res.json({ success: true, data: room });
  } catch (err) {
    console.error('‚ùå L·ªói getRoomById:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y ph√≤ng h·ªçc' });
  }
};

/**
 * ‚ûï T·∫°o ph√≤ng h·ªçc
 */
exports.createRoom = async (req, res) => {
  try {
    await roomModel.create(req.body);
    res.status(201).json({ success: true, message: 'T·∫°o ph√≤ng h·ªçc th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói createRoom:', err);
     // X·ª≠ l√Ω l·ªói tr√πng m√£ ph√≤ng (n·∫øu c√≥ t·ª´ CSDL)
     if (err.code === 'ER_DUP_ENTRY') {
       return res.status(400).json({ success: false, message: `M√£ ph√≤ng '${req.body.maPhong}' ƒë√£ t·ªìn t·∫°i.` });
     }
    res.status(500).json({ success: false, message: 'L·ªói server khi t·∫°o ph√≤ng h·ªçc' });
  }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t ph√≤ng h·ªçc
 */
exports.updateRoom = async (req, res) => {
  try {
    const { id } = req.params; // 'id' l√† 'maPhong'
    const updated = await roomModel.update(id, req.body);

    if (!updated) {
        return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ph√≤ng h·ªçc ƒë·ªÉ c·∫≠p nh·∫≠t' });
    }
    res.json({ success: true, message: 'C·∫≠p nh·∫≠t ph√≤ng h·ªçc th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói updateRoom:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi c·∫≠p nh·∫≠t ph√≤ng h·ªçc' });
  }
};

/**
 * üóëÔ∏è X√≥a ph√≤ng h·ªçc
 */
exports.deleteRoom = async (req, res) => {
  try {
    const { id } = req.params; // 'id' l√† 'maPhong'
    const deleted = await roomModel.remove(id);

    // Model.remove b√¢y gi·ªù n√©m l·ªói n·∫øu kh√¥ng x√≥a ƒë∆∞·ª£c, n√™n kh√¥ng c·∫ßn check deleted === 0 n·ªØa
    // if (!deleted) {
    //     return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ph√≤ng h·ªçc ƒë·ªÉ x√≥a' });
    // }

    res.json({ success: true, message: 'X√≥a ph√≤ng h·ªçc th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói deleteRoom:', err);
    // (M·ªöI) X·ª≠ l√Ω l·ªói r√†ng bu·ªôc kh√≥a ngo·∫°i t·ª´ Model
    if (err.message.includes('Kh√¥ng th·ªÉ x√≥a ph√≤ng')) {
        return res.status(400).json({ success: false, message: err.message });
    }
    // X·ª≠ l√Ω l·ªói kh√¥ng t√¨m th·∫•y (n·∫øu model.remove kh√¥ng n√©m l·ªói m√† tr·∫£ v·ªÅ 0)
    // Ho·∫∑c l·ªói chung
    res.status(500).json({ success: false, message: 'L·ªói server khi x√≥a ph√≤ng h·ªçc' });
  }
};