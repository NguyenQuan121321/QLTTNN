// (M·ªöI) G·ªçi Model
const userModel = require('../models/userModel');
const bcrypt = require('bcryptjs'); // V·∫´n c·∫ßn bcrypt ·ªü ƒë√¢y ƒë·ªÉ hash

/**
 * üßë‚Äçüíº L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
 */
exports.getAllUsers = async (req, res) => {
  try {
    const users = await userModel.findAll();
    res.json({ success: true, data: users });
  } catch (err) {
    console.error('‚ùå L·ªói getAllUsers:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng' });
  }
};

/**
 * üîç L·∫•y th√¥ng tin chi ti·∫øt 1 ng∆∞·ªùi d√πng
 */
exports.getUserById = async (req, res) => {
  try {
    const { id } = req.params;
    const user = await userModel.findById(id);

    if (!user)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    // Kh√¥ng tr·∫£ v·ªÅ password hash
    const { password, ...userData } = user;
    res.json({ success: true, data: userData });
  } catch (err) {
    console.error('‚ùå L·ªói getUserById:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng' });
  }
};

/**
 * ‚ûï Th√™m m·ªõi ng∆∞·ªùi d√πng (Admin) - Controller hash password
 */
exports.createUser = async (req, res) => {
  try {
    const { username, password, email, role, fullName, phone, gender, dob } = req.body;

    // Validate input
    if (!username || !password || !role)
      return res.status(400).json({ success: false, message: 'Thi·∫øu username, password ho·∫∑c role' });

    // Hash password tr∆∞·ªõc khi g·ª≠i cho Model
    const saltRounds = 10; // N√™n ƒë·∫∑t trong config
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    const userData = {
        username,
        password: hashedPassword, // G·ª≠i password ƒë√£ hash
        email,
        role,
        fullName,
        phone,
        gender,
        dob
    };

    const [newUserId] = await userModel.create(userData);

    res.status(201).json({ success: true, message: 'Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng', id: newUserId });
  } catch (err) {
    console.error('‚ùå L·ªói createUser:', err);
    if (err.message.includes('l√† b·∫Øt bu·ªôc')) { // L·ªói validation t·ª´ Model
        return res.status(400).json({ success: false, message: err.message });
    }
    if (err.code === 'ER_DUP_ENTRY') { // L·ªói tr√πng username/email
       return res.status(400).json({ success: false, message: 'Username ho·∫∑c Email ƒë√£ t·ªìn t·∫°i.' });
    }
    res.status(500).json({ success: false, message: 'L·ªói server khi th√™m ng∆∞·ªùi d√πng' });
  }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
 */
exports.updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    // L·∫•y c√°c tr∆∞·ªùng c√≥ th·ªÉ c·∫≠p nh·∫≠t t·ª´ body (kh√¥ng bao g·ªìm password)
    const { username, email, role, fullName, phone, gender, dob, isActive } = req.body;
    const userData = { username, email, role, fullName, phone, gender, dob, isActive };

    const updated = await userModel.update(id, userData);

    if (!updated)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t' });

    res.json({ success: true, message: 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói updateUser:', err);
     if (err.code === 'ER_DUP_ENTRY') { // L·ªói tr√πng username/email khi update
       return res.status(400).json({ success: false, message: 'Username ho·∫∑c Email ƒë√£ t·ªìn t·∫°i.' });
    }
    res.status(500).json({ success: false, message: 'L·ªói server khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng' });
  }
};

/**
 * üö´ Kh√≥a/M·ªü kh√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng (Soft delete/undelete)
 */
exports.deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    // M·∫∑c ƒë·ªãnh l√† kh√≥a (isActive = false)
    // C√≥ th·ªÉ th√™m logic ƒë·ªÉ m·ªü kh√≥a n·∫øu c·∫ßn (vd: g·ª≠i query param ?action=activate)
    const isActive = false;

    const updated = await userModel.setActiveStatus(id, isActive);

    if (!updated)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    // TODO: ƒê·ªìng b·ªô status/deletedAt c·ªßa HocVien/GiaoVien t∆∞∆°ng ·ª©ng (c√≥ th·ªÉ l√†m trong Model ho·∫∑c Service Layer)
    // V√≠ d·ª•: if (user.role === 'HOCVIEN') await studentModel.setActiveStatus(id, isActive);

    res.json({ success: true, message: isActive ? 'ƒê√£ m·ªü kh√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng' : 'ƒê√£ kh√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng' });
  } catch (err) {
    console.error('‚ùå L·ªói deleteUser:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi kh√≥a/m·ªü kh√≥a ng∆∞·ªùi d√πng' });
  }
};