const db = require('../config/database');
const bcrypt = require('bcryptjs');

/**
 * üßë‚Äçüíº L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
 */
exports.getAllUsers = async (req, res) => {
  try {
    const users = await db('User').select('id', 'username', 'email', 'role');
    res.json({ success: true, data: users });
  } catch (err) {
    console.error('L·ªói getAllUsers:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng' });
  }
};

/**
 * üîç L·∫•y th√¥ng tin chi ti·∫øt 1 ng∆∞·ªùi d√πng
 */
exports.getUserById = async (req, res) => {
  try {
    const { id } = req.params;
    const user = await db('User').where({ id }).first();

    if (!user)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    res.json({ success: true, data: user });
  } catch (err) {
    console.error('L·ªói getUserById:', err);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};

/**
 * ‚ûï Th√™m m·ªõi ng∆∞·ªùi d√πng (Admin)
 */
exports.createUser = async (req, res) => {
  try {
    const { username, password, email, role } = req.body;

    if (!username || !password)
      return res.status(400).json({ success: false, message: 'Thi·∫øu username ho·∫∑c password' });

    const hash = await bcrypt.hash(password, 10);

    const [newUserId] = await db('User').insert({
      username,
      password: hash,
      email,
      role: role || 'STUDENT',
      status: 'ACTIVE'
    });

    res.status(201).json({ success: true, message: 'Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng', id: newUserId });
  } catch (err) {
    console.error('L·ªói createUser:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi th√™m ng∆∞·ªùi d√πng' });
  }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
 */
exports.updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { username, email, role, status } = req.body;

    const updated = await db('User').where({ id }).update({
      username,
      email,
      role,
      status
    });

    if (!updated)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t' });

    res.json({ success: true, message: 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng' });
  } catch (err) {
    console.error('L·ªói updateUser:', err);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * üö´ X√≥a (ho·∫∑c kh√≥a) ng∆∞·ªùi d√πng
 */
exports.deleteUser = async (req, res) => {
  try {
    const { id } = req.params;

    // Thay v√¨ x√≥a h·∫≥n, b·∫°n c√≥ th·ªÉ ch·ªâ kh√≥a t√†i kho·∫£n
    const deleted = await db('User').where({ id }).update({ status: 'INACTIVE' });

    if (!deleted)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    res.json({ success: true, message: 'ƒê√£ kh√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng' });
  } catch (err) {
    console.error('L·ªói deleteUser:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi x√≥a ng∆∞·ªùi d√πng' });
  }
};