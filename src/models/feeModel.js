const db = require('../config/database'); //

/**
 * üí∏ T·∫°o phi·∫øu thu h·ªçc ph√≠ m·ªõi
 */
const create = (feeData) => {
  const { hocVienId, lopHocId, soTien, hanDong, description } = feeData;
  // Th√™m validation n·∫øu c·∫ßn
  if (!hocVienId || !soTien || !hanDong) {
    throw new Error('Thi·∫øu th√¥ng tin h·ªçc vi√™n, s·ªë ti·ªÅn ho·∫∑c h·∫°n ƒë√≥ng.');
  }
  return db('HocPhi').insert({ //
    hocVienId,
    lopHocId, // C√≥ th·ªÉ null
    soTien,
    // description, // Th√™m m√¥ t·∫£ n·∫øu DB c√≥ c·ªôt n√†y
    hanDong,
    trangThai: 'unpaid' // M·∫∑c ƒë·ªãnh
  });
};

/**
 * üîç T√¨m phi·∫øu thu h·ªçc ph√≠ theo ID
 */
const findById = (id) => {
  return db('HocPhi').where({ id }).first(); //
};

/**
 * üí∞ Ghi nh·∫≠n thanh to√°n m·ªõi
 */
const addPayment = (paymentData) => {
    const { hocPhiId, soTienThanhToan, phuongThuc, ghiChu } = paymentData;
    if (!hocPhiId || !soTienThanhToan) {
        throw new Error('Thi·∫øu ID phi·∫øu thu ho·∫∑c s·ªë ti·ªÅn thanh to√°n.');
    }
    return db('Payments').insert({ //
        hocPhiId,
        soTien: soTienThanhToan,
        phuongThuc,
        ghiChu
    });
};

/**
 * üìä T√≠nh t·ªïng s·ªë ti·ªÅn ƒë√£ thanh to√°n cho m·ªôt phi·∫øu thu
 */
const getTotalPaid = (hocPhiId) => {
    return db('Payments') //
      .where({ hocPhiId })
      .sum('soTien as totalPaid')
      .first();
};

/**
 * üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa phi·∫øu thu h·ªçc ph√≠
 */
const updateStatus = (hocPhiId, newStatus) => {
    const validStatus = ['unpaid', 'partial', 'paid', 'overdue']; //
    if (!validStatus.includes(newStatus)) {
        throw new Error(`Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: ${newStatus}`);
    }
    return db('HocPhi').where({ id: hocPhiId }).update({ trangThai: newStatus }); //
};


/**
 * üìÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i 'overdue' cho c√°c phi·∫øu qu√° h·∫°n
 */
const markOverdue = () => {
    const today = new Date();
    return db('HocPhi') //
      .where('hanDong', '<', today)
      .andWhere('trangThai', '!=', 'paid') // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ch∆∞a tr·∫£ ƒë·ªß
      .update({ trangThai: 'overdue' });
};

/**
 * üÜî L·∫•y danh s√°ch ID h·ªçc vi√™n c√≥ h·ªçc ph√≠ qu√° h·∫°n
 */
const findOverdueStudentIds = () => {
    return db('HocPhi') //
      .where({ trangThai: 'overdue' })
      .distinct('hocVienId')
      .pluck('hocVienId'); // Ch·ªâ l·∫•y m·∫£ng c√°c ID
};

/**
 * üîí Kh√≥a t√†i kho·∫£n h·ªçc vi√™n (C·∫≠p nh·∫≠t HocVien v√† User)
 */
const lockStudentAccounts = (studentIds) => {
    if (!studentIds || studentIds.length === 0) {
        return 0; // Kh√¥ng c√≥ ai ƒë·ªÉ kh√≥a
    }
    // const now = new Date(); // D√πng cho deletedAt n·∫øu c√≥
    return db.transaction(async (trx) => {
        // C·∫≠p nh·∫≠t HocVien
        await trx('HocVien')
            .whereIn('id', studentIds)
            .update({
                status: 'suspended', // Tr·∫°ng th√°i b·ªã kh√≥a do n·ª£
                // deletedAt: now // N·∫øu d√πng c·ªôt deletedAt
            });
        // C·∫≠p nh·∫≠t User
        await trx('User')
            .whereIn('id', studentIds)
            .update({
                isActive: false, // Kh√¥ng cho login
                // deletedAt: now // N·∫øu d√πng c·ªôt deletedAt
            });
    });
};

module.exports = {
  create,
  findById,
  addPayment,
  getTotalPaid,
  updateStatus,
  markOverdue,
  findOverdueStudentIds,
  lockStudentAccounts
};