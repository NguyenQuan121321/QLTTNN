const db = require('../config/database'); //

/**
 * üìã L·∫•y t·∫•t c·∫£ m√¥n h·ªçc
 */
const findAll = () => {
  return db("MonHoc").select("*"); //
};

/**
 * üîç L·∫•y m√¥n h·ªçc theo m√£ m√¥n h·ªçc (maMonHoc)
 */
const findById = (maMonHoc) => {
  return db("MonHoc").where("maMonHoc", maMonHoc).first(); //
};

/**
 * ‚ûï T·∫°o m·ªõi m√¥n h·ªçc
 */
const create = (subjectData) => {
  const { maMonHoc, tenMonHoc, moTa, heDaoTao } = subjectData;
  // Th√™m validation n·∫øu c·∫ßn (v√≠ d·ª•: ki·ªÉm tra maMonHoc kh√¥ng ƒë∆∞·ª£c r·ªóng)
  if (!maMonHoc || !tenMonHoc) {
      throw new Error('M√£ m√¥n h·ªçc v√† T√™n m√¥n h·ªçc l√† b·∫Øt bu·ªôc.');
  }
  return db("MonHoc").insert({ maMonHoc, tenMonHoc, moTa, heDaoTao }); //
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t m√¥n h·ªçc
 */
const update = (maMonHoc, subjectData) => {
  const { tenMonHoc, moTa, heDaoTao } = subjectData;
  const updateData = {};
  if (tenMonHoc) updateData.tenMonHoc = tenMonHoc;
  if (moTa !== undefined) updateData.moTa = moTa;
  if (heDaoTao) updateData.heDaoTao = heDaoTao;

  return db("MonHoc").where("maMonHoc", maMonHoc).update(updateData); //
};

/**
 * üóëÔ∏è X√≥a m√¥n h·ªçc
 */
const remove = async (maMonHoc) => {
    // (M·ªöI) Ki·ªÉm tra r√†ng bu·ªôc kh√≥a ngo·∫°i tr∆∞·ªõc khi x√≥a
    const classUsingSubject = await db('LopHoc').where('monHocId', maMonHoc).first(); //
    if (classUsingSubject) {
        throw new Error(`Kh√¥ng th·ªÉ x√≥a m√¥n h·ªçc '${maMonHoc}' v√¨ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi l·ªõp '${classUsingSubject.tenLop}' (ID: ${classUsingSubject.id}).`);
    }
    // T∆∞∆°ng t·ª±, ki·ªÉm tra b·∫£ng GiaoTrinh, TaiLieuGiangDay n·∫øu c·∫ßn
    // const textbookUsingSubject = await db('GiaoTrinh').where('monHocId', maMonHoc).first();
    // if (textbookUsingSubject) { ... }

  return db("MonHoc").where("maMonHoc", maMonHoc).del(); //
};

module.exports = {
  findAll,
  findById,
  create,
  update,
  remove
};