const db = require('../config/database'); //

/**
 * üìã L·∫•y danh s√°ch l·ªõp h·ªçc (h·ªó tr·ª£ l·ªçc theo M√¥n h·ªçc)
 */
const findAll = (queryParams) => {
  const query = db('LopHoc') //
    .leftJoin('GiaoVien', 'LopHoc.giaoVienId', 'GiaoVien.id') //
    .leftJoin('MonHoc', 'LopHoc.monHocId', 'MonHoc.maMonHoc') //
    .leftJoin('PhongHoc', 'LopHoc.phongHocId', 'PhongHoc.maPhong') //
    .select(
      'LopHoc.id',
      'LopHoc.maLop',
      'LopHoc.tenLop',
      'LopHoc.trangThai',
      'LopHoc.ngayBatDau',
       'LopHoc.ngayKetThuc', // Th√™m ng√†y k·∫øt th√∫c
       'LopHoc.siSoToiDa', // Th√™m sƒ© s·ªë
      'MonHoc.tenMonHoc',
      'PhongHoc.tenPhong'
      // Th√™m 'GiaoVien.maGV' ho·∫∑c 'User.fullName' n·∫øu FE c·∫ßn
      // V√≠ d·ª•: 'User.fullName as teacherName' (c·∫ßn join th√™m User)
    );

  // H·ªó tr·ª£ l·ªçc theo M√¥n h·ªçc (v√≠ d·ª•: /api/classes?monHocId=TOEIC_550)
  if (queryParams && queryParams.monHocId) {
    query.where('LopHoc.monHocId', queryParams.monHocId);
  }
   // Th√™m l·ªçc theo tr·∫°ng th√°i n·∫øu c·∫ßn
   if (queryParams && queryParams.trangThai) {
       query.where('LopHoc.trangThai', queryParams.trangThai);
   }

  // Ch·ªâ l·∫•y l·ªõp ch∆∞a b·ªã x√≥a m·ªÅm (n·∫øu d√πng c·ªôt deletedAt)
  // query.whereNull('LopHoc.deletedAt');

  return query.orderBy('LopHoc.ngayBatDau', 'desc'); // S·∫Øp x·∫øp theo ng√†y b·∫Øt ƒë·∫ßu m·ªõi nh·∫•t
};

/**
 * üîç L·∫•y chi ti·∫øt l·ªõp (K√®m DSHV v√† T√¨nh tr·∫°ng h·ªçc ph√≠)
 */
const findById = async (id) => {

  // 1. L·∫•y th√¥ng tin c∆° b·∫£n c·ªßa L·ªõp
  const classInfoPromise = db('LopHoc') //
    .leftJoin('GiaoVien', 'LopHoc.giaoVienId', 'GiaoVien.id') //
    .leftJoin('MonHoc', 'LopHoc.monHocId', 'MonHoc.maMonHoc') //
    .leftJoin('PhongHoc', 'LopHoc.phongHocId', 'PhongHoc.maPhong') //
    .leftJoin('User', 'GiaoVien.id', 'User.id') // Join th√™m User ƒë·ªÉ l·∫•y t√™n GV
    .select(
      'LopHoc.*',
      'MonHoc.tenMonHoc',
      'PhongHoc.tenPhong',
      // L·∫•y th√¥ng tin GV t·ª´ c·∫£ 2 b·∫£ng
      db.raw("JSON_OBJECT('id', GiaoVien.id, 'fullName', User.fullName, 'maGV', GiaoVien.maGV) as teacherInfo")
    )
    .where('LopHoc.id', id)
    // .whereNull('LopHoc.deletedAt') // N·∫øu d√πng c·ªôt deletedAt
    .first();

  // 2. L·∫•y danh s√°ch sinh vi√™n v√† t√¨nh tr·∫°ng h·ªçc ph√≠ c·ªßa h·ªç CHO L·ªöP N√ÄY
  const studentsPromise = db('Enrollment') //
    .join('HocVien', 'Enrollment.hocVienId', 'HocVien.id') //
    .join('User', 'HocVien.id', 'User.id') //
    // D√πng Left Join ƒë·ªÉ n·∫øu SV ch∆∞a c√≥ phi·∫øu thu th√¨ v·∫´n hi·ªán ra
    .leftJoin('HocPhi', (builder) => { //
      builder.on('HocPhi.hocVienId', '=', 'HocVien.id')
             .andOn('HocPhi.lopHocId', '=', 'Enrollment.lopHocId'); // Quan tr·ªçng: Ph·∫£i kh·ªõp c·∫£ lopHocId
    })
    .where('Enrollment.lopHocId', id)
    // Ch·ªâ l·∫•y enrollment 'active' trong l·ªõp n√†y?
    // .where('Enrollment.status', 'active')
    .select(
      'HocVien.id as studentId',
      'HocVien.code as studentCode',
      'User.fullName as studentName',
      'User.email',
      'User.phone',
      'Enrollment.status as enrollmentStatus',
      // Tr·∫°ng th√°i h·ªçc ph√≠ cho l·ªõp n√†y
      db.raw("IF(HocPhi.id IS NULL, 'Ch∆∞a t·∫°o ph√≠', HocPhi.trangThai) as feeStatus"),
      'HocPhi.soTien'
    );

  const [classInfo, students] = await Promise.all([classInfoPromise, studentsPromise]);

  if (!classInfo) return null;

  return {
    ...classInfo,
    students: students // G·∫Øn danh s√°ch sinh vi√™n v√†o k·∫øt qu·∫£
  };
};

/**
 * ‚ûï T·∫°o l·ªõp h·ªçc
 */
const create = (classData) => {
  const { maLop, tenLop, siSoToiDa, ngayBatDau, ngayKetThuc, monHocId, phongHocId, giaoVienId } = classData;

  if (!maLop || !tenLop || !monHocId || !phongHocId || !giaoVienId || !ngayBatDau || !ngayKetThuc) {
      throw new Error('Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: M√£ l·ªõp, T√™n l·ªõp, M√¥n h·ªçc, Ph√≤ng h·ªçc, Gi√°o vi√™n, Ng√†y b·∫Øt ƒë·∫ßu, Ng√†y k·∫øt th√∫c.');
  }

  if (siSoToiDa > 50) {
    throw new Error('Sƒ© s·ªë t·ªëi ƒëa kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50');
  }

  // D√≤ng log ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
  console.log('--- Inserting class with data:', classData);

  return db('LopHoc').insert({ //
    maLop,
    tenLop,
    siSoToiDa,
    ngayBatDau,
    ngayKetThuc,
    trangThai: 'Mo', // M·∫∑c ƒë·ªãnh khi t·∫°o
    monHocId,
    phongHocId,
    giaoVienId
  });
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t l·ªõp h·ªçc
 */
const update = (id, classData) => {
   // L·∫•y c√°c tr∆∞·ªùng c√≥ th·ªÉ c·∫≠p nh·∫≠t t·ª´ controller c≈©
   const { tenLop, siSoToiDa, ngayKetThuc, trangThai, giaoVienId, phongHocId, monHocId, ngayBatDau, maLop } = classData;

   if (siSoToiDa && siSoToiDa > 50) {
     throw new Error('Sƒ© s·ªë t·ªëi ƒëa kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50');
   }

   // T·∫°o object update ƒë·ªông ƒë·ªÉ tr√°nh l·ªói
   const updateData = {};
   if (maLop) updateData.maLop = maLop; // Cho ph√©p s·ª≠a m√£ l·ªõp?
   if (tenLop) updateData.tenLop = tenLop;
   if (siSoToiDa) updateData.siSoToiDa = siSoToiDa;
   if (ngayBatDau) updateData.ngayBatDau = ngayBatDau; // Cho ph√©p s·ª≠a ng√†y Bƒê?
   if (ngayKetThuc) updateData.ngayKetThuc = ngayKetThuc;
   if (trangThai) updateData.trangThai = trangThai; // Mo, Dong, Huy
   if (monHocId) updateData.monHocId = monHocId;
   if (phongHocId) updateData.phongHocId = phongHocId;
   if (giaoVienId) updateData.giaoVienId = giaoVienId;

   return db('LopHoc').where({ id }).update(updateData); //
};

/**
 * üö´ ƒê√≥ng (X√≥a m·ªÅm) l·ªõp h·ªçc
 */
const remove = (id) => {
    // Ch·ªâ ƒë·ªïi tr·∫°ng th√°i, kh√¥ng x√≥a h·∫≥n
  return db('LopHoc').where({ id }).update({ trangThai: 'Dong' }); //
  // N·∫øu d√πng c·ªôt deletedAt:
  // return db('LopHoc').where({ id }).update({ deletedAt: new Date() });
};


module.exports = {
  findAll,
  findById,
  create,
  update,
  remove
};