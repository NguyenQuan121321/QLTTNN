const db = require('../config/database'); //

/**
 * üìã L·∫•y danh s√°ch gi√°o vi√™n (Join v·ªõi User)
 */
const findAll = () => {
  return db('GiaoVien') //
    .join('User', 'GiaoVien.id', '=', 'User.id') //
    .select(
      'GiaoVien.id', // User ID
      'User.fullName',
      'User.email',
      'User.phone',
      'GiaoVien.maGV',
      'GiaoVien.chuyenMon',
      'GiaoVien.status',
      'GiaoVien.joinedDate'
      // Th√™m c√°c tr∆∞·ªùng kh√°c t·ª´ GiaoVien n·∫øu c·∫ßn (address, degree...)
    )
    .where('GiaoVien.deletedAt', null) // Ch·ªâ l·∫•y GV ch∆∞a b·ªã x√≥a m·ªÅm
    .where('User.deletedAt', null);      // Ch·ªâ l·∫•y User ch∆∞a b·ªã x√≥a m·ªÅm
};

/**
 * üîç L·∫•y th√¥ng tin chi ti·∫øt gi√°o vi√™n (Join v·ªõi User)
 */
const findById = (id) => {
  return db('GiaoVien') //
    .join('User', 'GiaoVien.id', '=', 'User.id') //
    .where('GiaoVien.id', id)
    .where('GiaoVien.deletedAt', null) // ƒê·∫£m b·∫£o GV ch∆∞a b·ªã x√≥a
    .where('User.deletedAt', null)      // ƒê·∫£m b·∫£o User ch∆∞a b·ªã x√≥a
    .select('GiaoVien.*', 'User.username', 'User.fullName', 'User.email', 'User.phone', 'User.gender', 'User.dob', 'User.isActive') // L·∫•y t·∫•t c·∫£ th√¥ng tin
    .first();
};

/**
 * ‚ûï T·∫°o m·ªõi gi√°o vi√™n (T·∫°o User v√† GiaoVien)
 */
const create = (teacherData) => {
  const { username, password, fullName, email, phone, chuyenMon, degree, address, joinedDate, avatar } = teacherData;

   if (!username || !password) {
       throw new Error('Username v√† Password l√† b·∫Øt bu·ªôc.');
   }
   // Th√™m c√°c validation kh√°c n·∫øu c·∫ßn

  return db.transaction(async (trx) => {
    // 1. T·∫°o User
    const [userId] = await trx('User').insert({
      username,
      password, // TODO: Hash m·∫≠t kh·∫©u ·ªü Controller ho·∫∑c Service Layer
      role: 'GIAOVIEN',
      fullName,
      email,
      phone
      // Th√™m gender, dob n·∫øu c√≥ t·ª´ FE
    });

    // 2. T·∫°o GiaoVien
    await trx('GiaoVien').insert({
      id: userId,
      maGV: `GV${Date.now().toString().slice(-6)}`, // C·∫£i thi·ªán m√£ GV
      address,
      degree,
      joinedDate: joinedDate || new Date(),
      avatar,
      chuyenMon,
      status: 'active' // M·∫∑c ƒë·ªãnh
    });

    return { id: userId }; // Tr·∫£ v·ªÅ ID c·ªßa User (c≈©ng l√† ID c·ªßa GiaoVien)
  });
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin gi√°o vi√™n (C·∫£ User v√† GiaoVien)
 */
const update = (id, teacherData) => {
  const { fullName, email, phone, chuyenMon, degree, status, address, avatar } = teacherData;
  // Th√™m gender, dob n·∫øu c·∫ßn c·∫≠p nh·∫≠t User

   const validStatus = ['active', 'inactive'];
   const newStatus = validStatus.includes(status) ? status : 'active';
   const isActiveUser = (newStatus === 'active'); // User active khi GiaoVien active

  return db.transaction(async (trx) => {
    // 1. C·∫≠p nh·∫≠t User
    const userDataToUpdate = {};
    if (fullName) userDataToUpdate.fullName = fullName;
    if (email) userDataToUpdate.email = email;
    if (phone) userDataToUpdate.phone = phone;
    // Th√™m gender, dob
    userDataToUpdate.isActive = isActiveUser; // ƒê·ªìng b·ªô User.isActive

    await trx('User').where({ id }).update(userDataToUpdate);

    // 2. C·∫≠p nh·∫≠t GiaoVien
    const teacherDataToUpdate = {};
    if (chuyenMon) teacherDataToUpdate.chuyenMon = chuyenMon;
    if (degree) teacherDataToUpdate.degree = degree;
    if (status) teacherDataToUpdate.status = newStatus;
    if (address !== undefined) teacherDataToUpdate.address = address;
    if (avatar !== undefined) teacherDataToUpdate.avatar = avatar;

    await trx('GiaoVien').where({ id }).update(teacherDataToUpdate);
  });
};

/**
 * üö´ Kh√≥a gi√°o vi√™n (Soft delete)
 */
const remove = (id) => {
  const now = new Date();
  return db.transaction(async (trx) => {
    // C·∫≠p nh·∫≠t GiaoVien
    await trx('GiaoVien').where({ id }).update({
        status: 'inactive',
        deletedAt: now // ƒê√°nh d·∫•u x√≥a m·ªÅm
    });
    // C·∫≠p nh·∫≠t User
    await trx('User').where({ id }).update({
        isActive: false,
        deletedAt: now // ƒê√°nh d·∫•u x√≥a m·ªÅm
    });
    // (Quan tr·ªçng) X·ª≠ l√Ω c√°c l·ªõp ƒëang ƒë∆∞·ª£c GV n√†y d·∫°y
    // Option 1: G√°n l·ªõp cho GV kh√°c (ph·ª©c t·∫°p)
    // Option 2: Set giaoVienId c·ªßa c√°c l·ªõp ƒë√≥ th√†nh NULL (n·∫øu CSDL cho ph√©p)
    await trx('LopHoc').where('giaoVienId', id).update({ giaoVienId: null });
  });
};


module.exports = {
  findAll,
  findById,
  create,
  update,
  remove
};