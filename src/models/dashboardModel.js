const db = require('../config/database'); //

/**
 * üìä L·∫•y s·ªë li·ªáu th·ªëng k√™ t·ªïng quan
 */
const getOverallStats = async () => {
    // 1. ƒê·∫øm H·ªçc vi√™n (Active)
    const activeStudentCountPromise = db('HocVien') //
        .where({ status: 'active' })
        .count('id as count')
        .first();

    // 2. ƒê·∫øm Gi√°o vi√™n (Active)
    const activeTeacherCountPromise = db('GiaoVien') //
        .where({ status: 'active' })
        .count('id as count')
        .first();

    // 3. ƒê·∫øm L·ªõp h·ªçc (ƒêang m·ªü)
    const openClassCountPromise = db('LopHoc') //
        .where({ trangThai: 'Mo' }) // Ho·∫∑c 'OPEN' n·∫øu d√πng DB m·ªõi
        .count('id as count')
        .first();

    // 4. T√≠nh T·ªïng h·ªçc ph√≠ ƒë√£ thu (trong th√°ng hi·ªán t·∫°i - v√≠ d·ª•)
    const currentMonth = new Date().getMonth() + 1; // Th√°ng hi·ªán t·∫°i (1-12)
    const currentYear = new Date().getFullYear(); // NƒÉm hi·ªán t·∫°i
    const totalRevenueThisMonthPromise = db('Payments') //
        // L·ªçc theo th√°ng v√† nƒÉm c·ªßa ngayThanhToan
        .whereRaw('MONTH(ngayThanhToan) = ?', [currentMonth])
        .whereRaw('YEAR(ngayThanhToan) = ?', [currentYear])
        .sum('soTien as total')
        .first();

    // 5. T√≠nh T·ªïng c√¥ng n·ª£ (H·ªçc ph√≠ ch∆∞a thanh to√°n + qu√° h·∫°n)
    const totalDebtPromise = db('HocPhi') //
        .whereIn('trangThai', ['unpaid', 'partial', 'overdue'])
        // C·∫ßn t√≠nh s·ªë ti·ªÅn c√≤n n·ª£ = soTien - SUM(payments.soTien)
        // ƒê√¢y l√† m·ªôt query ph·ª©c t·∫°p h∆°n, t·∫°m th·ªùi l·∫•y t·ªïng s·ªë ti·ªÅn c·ªßa c√°c phi·∫øu ch∆∞a paid/overdue
        .sum('soTien as total') // T·∫°m t√≠nh t·ªïng c√°c phi·∫øu ch∆∞a ƒë√≥ng ƒë·ªß
        .first();


    // Ch·∫°y c√°c query song song
    const [
        activeStudentCountResult,
        activeTeacherCountResult,
        openClassCountResult,
        totalRevenueThisMonthResult,
        totalDebtResult
    ] = await Promise.all([
        activeStudentCountPromise,
        activeTeacherCountPromise,
        openClassCountPromise,
        totalRevenueThisMonthPromise,
        totalDebtPromise
    ]);

    // Tr·∫£ v·ªÅ object ch·ª©a c√°c s·ªë li·ªáu
    return {
        activeStudents: activeStudentCountResult.count || 0,
        activeTeachers: activeTeacherCountResult.count || 0,
        openClasses: openClassCountResult.count || 0,
        revenueThisMonth: totalRevenueThisMonthResult.total || 0,
        // L∆∞u √Ω: totalDebt n√†y ch∆∞a ch√≠nh x√°c ho√†n to√†n n·∫øu c√≥ partial payment
        estimatedTotalDebt: totalDebtResult.total || 0
    };
};

// C√≥ th·ªÉ th√™m c√°c h√†m kh√°c ƒë·ªÉ l·∫•y d·ªØ li·ªáu bi·ªÉu ƒë·ªì, ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y...
// V√≠ d·ª•: L·∫•y 5 h·ªçc vi√™n ƒëƒÉng k√Ω g·∫ßn nh·∫•t
const getRecentStudents = () => {
    return db('HocVien')
        .join('User', 'HocVien.id', 'User.id')
        .orderBy('registrationDate', 'desc')
        .limit(5)
        .select('HocVien.code', 'User.fullName', 'HocVien.registrationDate');
}


module.exports = {
  getOverallStats,
  getRecentStudents // Xu·∫•t h√†m m·ªõi n·∫øu c√≥
};